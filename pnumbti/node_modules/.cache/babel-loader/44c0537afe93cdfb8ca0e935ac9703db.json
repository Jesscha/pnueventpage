{"ast":null,"code":"var _jsxFileName = \"/Users/gitt/pnu/pnueventpage/pnumbti/src/pages/QuestionPage/QuestionPage.jsx\";\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport ProgressBar from '../ProgressBar/ProgressBar.jsx';\nimport questionData from '../../asset/qustionData.js'; // 이 컴포넌트의 state로 M,B,T,I 를 넣는다. \n// 각 문항이 클릭 되면 두가지 액션이 시작된다. \n// 1. 다음 문항을 불러오는 기능, 2. 해당 문항에 기반한 점수를 기록하는 기능 // \n// 다음 문항을 불러오는 기능은 어떻게 만드는가? \n// 문항을 배열로 저장해 놓고 문제 인덱스 state를 바꾸면 됨\n// 게이지는 문제 인덱스가 변함에 따라서 변하게 하면 됨\n// 뒤로가기 기능이 있다면, 직전에 바뀐 MBTI 스코어를 기억하는 state를 하나 두면 된다.\n// 여기의 결과 성향을 정답 페이지로 넘겨준다. Prams 로 넘겨주면 될 듯 \n// 개발 순서를 보자 질문 및 선택지가 컴포넌인가 하나의 컴포넌트로 구현 되어야 하는가\n// 이렇게 하면 페이지 구성 어떻게 할 수 있지? \n// 하나하나 손으로 구현?\n// 데이터가 형식의 정의 ,  데이터의 형식 {질문 유형, 질문 내용, 필요 이미지, 각 선택지가 의미하는 것, 각 선택지 텍스트 }의 키벨류를 가지고 있으면 된다. \n// 질문 컴포넌트는 인덱스의 마지막에 도달 했을 때, 그때까지의 결과를 담아서 최종 결과보기 기능을 구현한다. \n//  마지막페이지 메시지 오는 느낌적 느낌으로 만들어야 함 \n\nfunction QuestionPage() {\n  const numberOfQuestions = questionData.length;\n  const [isLast, setIsLast] = useState(false);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [E, setE] = useState(0);\n  const [I, setI] = useState(0);\n  const [F, setF] = useState(0);\n  const [T, setT] = useState(0);\n  const [S, setS] = useState(0);\n  const [N, setN] = useState(0);\n  const [J, setJ] = useState(0);\n  const [P, setP] = useState(0);\n\n  const setMBTIScore = questionType => {\n    switch (questionType) {\n      case \"E\":\n        setE(E + 1);\n        break;\n\n      case \"I\":\n        setI(I + 1);\n        break;\n\n      case \"F\":\n        setF(F + 1);\n        break;\n\n      case \"T\":\n        setT(T + 1);\n        break;\n\n      case \"S\":\n        setS(S + 1);\n        break;\n\n      case \"N\":\n        setN(N + 1);\n        break;\n\n      case \"J\":\n        setJ(J + 1);\n        break;\n\n      case \"P\":\n        setP(P + 1);\n        break;\n\n      default:\n        console.log(\"wrong type\");\n    } // 마지막 페이지면 다음장 가기기능 정지\n\n\n    setQuestionIndex(questionIndex + 1);\n\n    if (questionIndex + 1 === numberOfQuestions) {\n      setIsLast(true);\n    }\n  };\n\n  const calulateMBTI = () => {\n    let EI = E > I ? \"E\" : \" I\";\n    let SN = S > N ? \"S\" : \"N\";\n    let TF = T > F ? \"T\" : \"F\";\n    let JP = J > P ? \"J\" : \"P\";\n    return `${EI}${SN}${TF}${JP}`;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, !isLast ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 18\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, \"Q. \", questionData[questionIndex].question), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, questionData[questionIndex].describtion), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setMBTIScore(questionData[questionIndex].optionOne),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, \" 1\\uBC88 \\uC120\\uD0DD\\uC9C0 \"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setMBTIScore(questionData[questionIndex].optionTwo),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, \" 2\\uBC88 \\uC120\\uD0DD\\uC9C0 \")) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 16\n    }\n  }, lastQuestionText.map((text, i) => {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 20\n      }\n    }, text.text);\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    placeholder: \"내 생일은... \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Link, {\n    to: `/result/${calulateMBTI()}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }, \" \\uACB0\\uACFC \\uBCF4\\uB7EC\\uAC00\\uAE30 \", calulateMBTI())), /*#__PURE__*/React.createElement(ProgressBar, {\n    bgcolor: \"antiquewhite\",\n    completed: questionIndex / numberOfQuestions * 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }));\n}\n\nconst lastQuestionText = [{\n  text: '생일 함께해줘서 정말 고마웠어 친구야. 준 선물도 진짜 필요한 선물이었어. 네 생일때도 꼭 필요한 선물을 주고 싶어.'\n}, {\n  text: '네 생일은 언제였지?'\n}];\nexport default QuestionPage;","map":{"version":3,"sources":["/Users/gitt/pnu/pnueventpage/pnumbti/src/pages/QuestionPage/QuestionPage.jsx"],"names":["React","useState","Link","ProgressBar","questionData","QuestionPage","numberOfQuestions","length","isLast","setIsLast","questionIndex","setQuestionIndex","E","setE","I","setI","F","setF","T","setT","S","setS","N","setN","J","setJ","P","setP","setMBTIScore","questionType","console","log","calulateMBTI","EI","SN","TF","JP","width","question","describtion","optionOne","optionTwo","lastQuestionText","map","text","i"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport ProgressBar from '../ProgressBar/ProgressBar.jsx'\nimport questionData from '../../asset/qustionData.js';\n\n\n\n// 이 컴포넌트의 state로 M,B,T,I 를 넣는다. \n// 각 문항이 클릭 되면 두가지 액션이 시작된다. \n// 1. 다음 문항을 불러오는 기능, 2. 해당 문항에 기반한 점수를 기록하는 기능 // \n\n// 다음 문항을 불러오는 기능은 어떻게 만드는가? \n// 문항을 배열로 저장해 놓고 문제 인덱스 state를 바꾸면 됨\n// 게이지는 문제 인덱스가 변함에 따라서 변하게 하면 됨\n// 뒤로가기 기능이 있다면, 직전에 바뀐 MBTI 스코어를 기억하는 state를 하나 두면 된다.\n// 여기의 결과 성향을 정답 페이지로 넘겨준다. Prams 로 넘겨주면 될 듯 \n\n// 개발 순서를 보자 질문 및 선택지가 컴포넌인가 하나의 컴포넌트로 구현 되어야 하는가\n// 이렇게 하면 페이지 구성 어떻게 할 수 있지? \n\n// 하나하나 손으로 구현?\n// 데이터가 형식의 정의 ,  데이터의 형식 {질문 유형, 질문 내용, 필요 이미지, 각 선택지가 의미하는 것, 각 선택지 텍스트 }의 키벨류를 가지고 있으면 된다. \n\n// 질문 컴포넌트는 인덱스의 마지막에 도달 했을 때, 그때까지의 결과를 담아서 최종 결과보기 기능을 구현한다. \n\n//  마지막페이지 메시지 오는 느낌적 느낌으로 만들어야 함 \n\n\n\n\nfunction QuestionPage() {\n\n  const numberOfQuestions = questionData.length\n\n  const [isLast, setIsLast] = useState(false);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [E, setE] = useState(0);\n  const [I, setI] = useState(0);\n  const [F, setF] = useState(0);\n  const [T, setT] = useState(0);\n  const [S, setS] = useState(0);\n  const [N, setN] = useState(0);\n  const [J, setJ] = useState(0);\n  const [P, setP] = useState(0);\n\n  const setMBTIScore = (questionType) => {\n    switch (questionType) {\n      case \"E\":\n        setE(E + 1)\n        break\n      case \"I\":\n        setI(I + 1)\n        break\n      case \"F\":\n        setF(F + 1)\n        break\n      case \"T\":\n        setT(T + 1)\n        break\n      case \"S\":\n        setS(S + 1)\n        break\n      case \"N\":\n        setN(N + 1)\n        break\n      case \"J\":\n        setJ(J + 1)\n        break\n      case \"P\":\n        setP(P + 1)\n        break\n      default:\n        console.log(\"wrong type\")\n    }\n\n    // 마지막 페이지면 다음장 가기기능 정지\n    setQuestionIndex(questionIndex + 1)\n    if (questionIndex + 1 === numberOfQuestions) {\n      setIsLast(true);\n    }\n  }\n\n  const calulateMBTI = () => {\n    let EI = E > I ? \"E\" : \" I\";\n    let SN = S > N ? \"S\" : \"N\";\n    let TF = T > F ? \"T\" : \"F\";\n    let JP = J > P ? \"J\" : \"P\";\n\n    return `${EI}${SN}${TF}${JP}`\n\n  }\n\n\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      {!isLast ? <div>\n        <h1>Q. {questionData[questionIndex].question}</h1>\n        <p>{questionData[questionIndex].describtion}</p>\n        {/* 체커블하게 만들자 다시 취소할 수도 있으니까 체크 할 때   */}\n        <button onClick={() => setMBTIScore(questionData[questionIndex].optionOne)}> 1번 선택지 </button>\n        <button onClick={() => setMBTIScore(questionData[questionIndex].optionTwo)}> 2번 선택지 </button>\n      </div> : <div>\n\n          {/* 채팅앱 비스무리한  컴포넌트 구현부  */}\n          {lastQuestionText.map((text, i) => {\n            return <p key={i}>\n              {text.text}\n            </p>\n          })}\n          {/* 생일 보내기 리퀘ㅔ스트 보내는 구현부 */}\n          <input placeholder={\"내 생일은... \"} />\n\n          <Link to={`/result/${calulateMBTI()}`} > 결과 보러가기 {calulateMBTI()}</Link>\n        </div>\n      }\n\n      <ProgressBar bgcolor=\"antiquewhite\" completed={((questionIndex) / numberOfQuestions * 100)} />\n    </div>\n  );\n}\n\n\nconst lastQuestionText = [\n\n  { text: '생일 함께해줘서 정말 고마웠어 친구야. 준 선물도 진짜 필요한 선물이었어. 네 생일때도 꼭 필요한 선물을 주고 싶어.' },\n  { text: '네 생일은 언제였지?' },\n]\n\n\n\nexport default QuestionPage;\n"]},"metadata":{},"sourceType":"module"}